/*
 * Created on 2018-10-10 ( Date ISO 2018-10-10 - Time 14:03:17 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.Airports;
import com.example.demo.service.AirportsService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/airports", produces = "application/hal+json")
public class AirportsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(AirportsController.class);

	private static final String NOT_FOUND ="Airports not found";

	@Autowired
	private AirportsService airportsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Airports> findAll() {
		List<Airports> list = airportsService.findAll();
		return list;
	}


	@GetMapping("{airportCode}")
	public Airports get(@PathVariable("airportCode") Integer airportCode) {
		final Airports airports = airportsService.getOne(airportCode);
		LOGGER.info("Airports found : {}", airports);
		return airports;
	}

	@PostMapping(consumes = "application/json")
	public Airports create(@RequestBody Airports airports) {
		LOGGER.info("Airports creation request : {}", airports);
		if (airportsService.exist(airports)) {
			LOGGER.info("Airports already exist ! : {}", airports);
			return null;
		} else {
			final Airports created = airportsService.create(airports);
			LOGGER.info("Created airports {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public Airports update(@RequestBody Airports airports) {
		return airportsService.update(airports);
	}

	@DeleteMapping("{airportCode}")
	public void delete(@PathVariable("airportCode") Integer airportCode) {
		LOGGER.info("Airports deletion request : {}", resolveIdForLogger(airportCode));
		if (airportsService.delete(airportCode)) {
			LOGGER.info("Airports succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer airportCode) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(airportCode));
		return ids.toString();
	}

}


