/*
 * Created on 2018-10-10 ( Date ISO 2018-10-10 - Time 14:03:17 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.Payments;
import com.example.demo.service.PaymentsService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/payments", produces = "application/hal+json")
public class PaymentsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(PaymentsController.class);

	private static final String NOT_FOUND ="Payments not found";

	@Autowired
	private PaymentsService paymentsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<Payments> findAll() {
		List<Payments> list = paymentsService.findAll();
		return list;
	}


	@GetMapping("{paymentId}")
	public Payments get(@PathVariable("paymentId") Integer paymentId) {
		final Payments payments = paymentsService.getOne(paymentId);
		LOGGER.info("Payments found : {}", payments);
		return payments;
	}

	@PostMapping(consumes = "application/json")
	public Payments create(@RequestBody Payments payments) {
		LOGGER.info("Payments creation request : {}", payments);
		if (paymentsService.exist(payments)) {
			LOGGER.info("Payments already exist ! : {}", payments);
			return null;
		} else {
			final Payments created = paymentsService.create(payments);
			LOGGER.info("Created payments {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public Payments update(@RequestBody Payments payments) {
		return paymentsService.update(payments);
	}

	@DeleteMapping("{paymentId}")
	public void delete(@PathVariable("paymentId") Integer paymentId) {
		LOGGER.info("Payments deletion request : {}", resolveIdForLogger(paymentId));
		if (paymentsService.delete(paymentId)) {
			LOGGER.info("Payments succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer paymentId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(paymentId));
		return ids.toString();
	}

}


