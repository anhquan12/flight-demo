/*
 * Created on 2018-10-10 ( Date ISO 2018-10-10 - Time 14:03:17 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.RefCalendar;
import com.example.demo.service.RefCalendarService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/refCalendar", produces = "application/hal+json")
public class RefCalendarController {

	private static final Logger LOGGER = LoggerFactory.getLogger(RefCalendarController.class);

	private static final String NOT_FOUND ="RefCalendar not found";

	@Autowired
	private RefCalendarService refCalendarService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<RefCalendar> findAll() {
		List<RefCalendar> list = refCalendarService.findAll();
		return list;
	}


	@GetMapping("{dayDate}")
	public RefCalendar get(@PathVariable("dayDate") Integer dayDate) {
		final RefCalendar refCalendar = refCalendarService.getOne(dayDate);
		LOGGER.info("RefCalendar found : {}", refCalendar);
		return refCalendar;
	}

	@PostMapping(consumes = "application/json")
	public RefCalendar create(@RequestBody RefCalendar refCalendar) {
		LOGGER.info("RefCalendar creation request : {}", refCalendar);
		if (refCalendarService.exist(refCalendar)) {
			LOGGER.info("RefCalendar already exist ! : {}", refCalendar);
			return null;
		} else {
			final RefCalendar created = refCalendarService.create(refCalendar);
			LOGGER.info("Created refCalendar {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public RefCalendar update(@RequestBody RefCalendar refCalendar) {
		return refCalendarService.update(refCalendar);
	}

	@DeleteMapping("{dayDate}")
	public void delete(@PathVariable("dayDate") Integer dayDate) {
		LOGGER.info("RefCalendar deletion request : {}", resolveIdForLogger(dayDate));
		if (refCalendarService.delete(dayDate)) {
			LOGGER.info("RefCalendar succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer dayDate) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(dayDate));
		return ids.toString();
	}

}


