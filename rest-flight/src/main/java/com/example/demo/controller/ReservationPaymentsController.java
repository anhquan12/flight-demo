/*
 * Created on 2018-10-10 ( Date ISO 2018-10-10 - Time 14:03:17 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.ReservationPayments;
import com.example.demo.service.ReservationPaymentsService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/reservationPayments", produces = "application/hal+json")
public class ReservationPaymentsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ReservationPaymentsController.class);

	private static final String NOT_FOUND ="ReservationPayments not found";

	@Autowired
	private ReservationPaymentsService reservationPaymentsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<ReservationPayments> findAll() {
		List<ReservationPayments> list = reservationPaymentsService.findAll();
		return list;
	}


	@GetMapping("{reservationId}")
	public ReservationPayments get(@PathVariable("reservationId") Integer reservationId) {
		final ReservationPayments reservationPayments = reservationPaymentsService.getOne(reservationId);
		LOGGER.info("ReservationPayments found : {}", reservationPayments);
		return reservationPayments;
	}

	@PostMapping(consumes = "application/json")
	public ReservationPayments create(@RequestBody ReservationPayments reservationPayments) {
		LOGGER.info("ReservationPayments creation request : {}", reservationPayments);
		if (reservationPaymentsService.exist(reservationPayments)) {
			LOGGER.info("ReservationPayments already exist ! : {}", reservationPayments);
			return null;
		} else {
			final ReservationPayments created = reservationPaymentsService.create(reservationPayments);
			LOGGER.info("Created reservationPayments {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public ReservationPayments update(@RequestBody ReservationPayments reservationPayments) {
		return reservationPaymentsService.update(reservationPayments);
	}

	@DeleteMapping("{reservationId}")
	public void delete(@PathVariable("reservationId") Integer reservationId) {
		LOGGER.info("ReservationPayments deletion request : {}", resolveIdForLogger(reservationId));
		if (reservationPaymentsService.delete(reservationId)) {
			LOGGER.info("ReservationPayments succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer reservationId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(reservationId));
		return ids.toString();
	}

}


