/*
 * Created on 2018-10-10 ( Date ISO 2018-10-10 - Time 14:03:17 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.BookingAgents;
import com.example.demo.service.BookingAgentsService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/bookingAgents", produces = "application/hal+json")
public class BookingAgentsController {

	private static final Logger LOGGER = LoggerFactory.getLogger(BookingAgentsController.class);

	private static final String NOT_FOUND ="BookingAgents not found";

	@Autowired
	private BookingAgentsService bookingAgentsService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<BookingAgents> findAll() {
		List<BookingAgents> list = bookingAgentsService.findAll();
		return list;
	}


	@GetMapping("{agentId}")
	public BookingAgents get(@PathVariable("agentId") Integer agentId) {
		final BookingAgents bookingAgents = bookingAgentsService.getOne(agentId);
		LOGGER.info("BookingAgents found : {}", bookingAgents);
		return bookingAgents;
	}

	@PostMapping(consumes = "application/json")
	public BookingAgents create(@RequestBody BookingAgents bookingAgents) {
		LOGGER.info("BookingAgents creation request : {}", bookingAgents);
		if (bookingAgentsService.exist(bookingAgents)) {
			LOGGER.info("BookingAgents already exist ! : {}", bookingAgents);
			return null;
		} else {
			final BookingAgents created = bookingAgentsService.create(bookingAgents);
			LOGGER.info("Created bookingAgents {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public BookingAgents update(@RequestBody BookingAgents bookingAgents) {
		return bookingAgentsService.update(bookingAgents);
	}

	@DeleteMapping("{agentId}")
	public void delete(@PathVariable("agentId") Integer agentId) {
		LOGGER.info("BookingAgents deletion request : {}", resolveIdForLogger(agentId));
		if (bookingAgentsService.delete(agentId)) {
			LOGGER.info("BookingAgents succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer agentId) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(agentId));
		return ids.toString();
	}

}


