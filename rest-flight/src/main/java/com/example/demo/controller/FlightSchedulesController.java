/*
 * Created on 2018-10-10 ( Date ISO 2018-10-10 - Time 14:03:17 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.example.demo.controller;

import com.example.demo.entity.FlightSchedules;
import com.example.demo.service.FlightSchedulesService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.http.MediaType;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/flightSchedules", produces = "application/hal+json")
public class FlightSchedulesController {

	private static final Logger LOGGER = LoggerFactory.getLogger(FlightSchedulesController.class);

	private static final String NOT_FOUND ="FlightSchedules not found";

	@Autowired
	private FlightSchedulesService flightSchedulesService;

	@RequestMapping(value = "/",
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<FlightSchedules> findAll() {
		List<FlightSchedules> list = flightSchedulesService.findAll();
		return list;
	}


	@GetMapping("{flightNumber}")
	public FlightSchedules get(@PathVariable("flightNumber") Integer flightNumber) {
		final FlightSchedules flightSchedules = flightSchedulesService.getOne(flightNumber);
		LOGGER.info("FlightSchedules found : {}", flightSchedules);
		return flightSchedules;
	}

	@PostMapping(consumes = "application/json")
	public FlightSchedules create(@RequestBody FlightSchedules flightSchedules) {
		LOGGER.info("FlightSchedules creation request : {}", flightSchedules);
		if (flightSchedulesService.exist(flightSchedules)) {
			LOGGER.info("FlightSchedules already exist ! : {}", flightSchedules);
			return null;
		} else {
			final FlightSchedules created = flightSchedulesService.create(flightSchedules);
			LOGGER.info("Created flightSchedules {}", created);
			return created;
		}
	}

	@PutMapping(consumes = "application/json")
	public FlightSchedules update(@RequestBody FlightSchedules flightSchedules) {
		return flightSchedulesService.update(flightSchedules);
	}

	@DeleteMapping("{flightNumber}")
	public void delete(@PathVariable("flightNumber") Integer flightNumber) {
		LOGGER.info("FlightSchedules deletion request : {}", resolveIdForLogger(flightNumber));
		if (flightSchedulesService.delete(flightNumber)) {
			LOGGER.info("FlightSchedules succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer flightNumber) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(flightNumber));
		return ids.toString();
	}

}


